/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ping.view;

import com.api.dropship.DropApiCall;
import com.config.Configs;
import com.ping.control.ActionListener;
import com.ping.control.CrawlProcessListener;
import com.ping.control.MainController;
import com.models.state.ProcessState;
import com.models.aliex.store.BaseStoreInfo;
import com.models.aliex.store.inputdata.BaseStoreOrderInfo;
import com.models.aliex.store.inputdata.SnakeBaseStoreOrderInfo;
import com.ping.control.SendInfoThread;
import com.ping.service.crawl.aliex.AliexCrawlSvs;
import com.ping.service.data.inputprocess.SnakeReadOrderInfoSvs;
import com.ping.tcpclient.ResponseObj;
import com.utils.Constants;
import com.utils.DialogUtil;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Admin
 */
public class ClientHomePanel extends BasePanel {

    JFrame topFrame;
    JFileChooser chooser;
    String choosertitle;

    ArrayList<BaseStoreInfo> listStorePage = new ArrayList<>();

    MainController mainController;

    JPanel controls;

    ProcessPannel processPannel;

    public ClientHomePanel() {
        initComponents();
        setTitle("Home");
        setMenuActionCommand("MainHome");
        initData();

    }

    public void initData() {

        mainController = new MainController();
        mainController.setCrawlProcessListener(crawlProcessListener);
        mainController.setActionListener(actionListener);

        topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);

//        String pathStr = null;
//        if (OSUtil.isWindows()) {
//            pathStr = Configs.CONFIG_FOLDER_PATH + "chromedriver.exe";
//        } else {
//            pathStr = Configs.CONFIG_FOLDER_PATH + "chromedriver";
//        }
//
//        if (pathStr != null) {
//            System.setProperty("webdriver.chrome.driver", pathStr);
//        }

        txtStoreFilePath.setText("" + Configs.storeFilePath);

        
        
//        AliexCrawlSvs.getInstance().initDriver();
//        if (!AliexCrawlSvs.getInstance().isHasCookies()) {
////            AliexCrawlSvs.getInstance().initDriver();
////            MerchantSearchSvs.getInstance().login();
//            boolean login = AliexCrawlSvs.getInstance().autoLoginAliex();
//            if(!login) {
//                int option = DialogUtil.showOptionsQuestionDialog(null, null, "Phiên bản trình duyệt chrome và phiên bản chromedriver không tương thích. Vui lòng cập nhật chromedriver theo phiên bản trình duyệt chrome trên máy tính!",
//                        "Cập nhật", "Đóng");
//                if (option == 0) {
//
//                    if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
//                        try {
//                            Desktop.getDesktop().browse(new URI("https://chromedriver.chromium.org/downloads?fbclid=IwAR1I_wfvE-sipnM0-ZsU-nTBZhLYX3exGq9u1ive6mEDZ8922fWQQ_B1p1M"));
//                        } catch (IOException ex) {
//                            Logger.getLogger(StartClientApp.class.getName()).log(Level.SEVERE, null, ex);
//                        } catch (URISyntaxException ex) {
//                            Logger.getLogger(StartClientApp.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                }
//            }
//        }
//        MerchantSearchSvs.getInstance().login();
//        AliexCrawlSvs.getInstance().autoLoginAliex();

        btnStop.setEnabled(false);
        
//        if (!AliexCrawlSvs.getInstance().isHasCookies()) {
//            AliexCrawlSvs.getInstance().autoLoginAliex();
//        }

//        javax.swing.SwingUtilities.invokeLater(new Runnable() {
//            public void run() {
//                processPannel = new ProcessPannel(statePannel.getWidth(), statePannel.getHeight());
//                processPannel.setBackground(Color.red);
//                statePannel.add(processPannel);
//                statePannel.validate();
//            }
//        });
    }

    public void disableButton() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        storePanel = new javax.swing.JPanel();
        btnStartCrawl = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtStoreFilePath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        btnStartCrawl.setText("Start");
        btnStartCrawl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartCrawlActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout storePanelLayout = new javax.swing.GroupLayout(storePanel);
        storePanel.setLayout(storePanelLayout);
        storePanelLayout.setHorizontalGroup(
            storePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storePanelLayout.createSequentialGroup()
                .addGroup(storePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStartCrawl, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 1, Short.MAX_VALUE))
        );
        storePanelLayout.setVerticalGroup(
            storePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storePanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(btnStartCrawl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(276, Short.MAX_VALUE))
        );

        jPanel3.setFocusTraversalPolicyProvider(true);

        txtStoreFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStoreFilePathActionPerformed(evt);
            }
        });

        jLabel1.setText("Store Link");

        jLabel2.setText("Chọn màu");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStoreFilePath, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 309, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStoreFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(storePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(storePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 13, Short.MAX_VALUE))
            .addComponent(jSeparator1)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    BaseStoreInfo storePageInfo;

    public void browsePage() {

    }

    public void loadStore(BaseStoreInfo storePageInfo) {

    }

    public void startCrawl() {

    }

    public long lastLoad;
//    public int pageCount;

    public void nextPage() {

    }

    public void stopCrawl() {
//        aliexCrawlThread.stopCrawl();
    }

    private void txtStoreFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStoreFilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStoreFilePathActionPerformed

    private void btnStartCrawlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartCrawlActionPerformed

        if (txtStoreFilePath.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Please chose a store excel file!");
            return;
        }
        
        File file = new File(txtStoreFilePath.getText());
        if(!file.exists()) {
            DialogUtil.showErrorMessage(topFrame, "File không tồn tại!", "Bấm Change để lựa chọn file đầu vào!");
            return;
        }
        
        ResponseObj responseObj = DropApiCall.doSendGetInfo(null);
        
        if(responseObj == null) {
            System.out.println("Can not check info!");
            return;
        }
        
        switch(responseObj.getResultCode()) {
            case Constants.ResultCode.SERIAL_INVALID:
                DialogUtil.showInfoMessage(null, "Máy tính cài đặt không hợp lệ. Liên hệ 0972071089 để được xác thực!");
                return;
            case Constants.ResultCode.VERSION_INVALID:
                DialogUtil.showInfoMessage(null,responseObj.getMessage() != null ? responseObj.getMessage() : "Version app không hợp lệ!");
                return;
        }
        if(responseObj.getMessage() != null) {
            DialogUtil.showInfoMessage(null,responseObj.getMessage());
        }
        
//        CookieUtil.deleteCookies();

        if(!AliexCrawlSvs.getInstance().rechiveCookies()) {
            DialogUtil.showInfoMessage(null, "Vui lòng thực hiện đăng nhập Aliexpress trước khi bắt đầu!");
            return;
        }

        if (mainController.isStop() || processPannel == null) {
            ArrayList<BaseStoreOrderInfo> listOrders = SnakeReadOrderInfoSvs.getInstance().readStoreOrderLinks(txtStoreFilePath.getText());
            
            SendInfoThread sendInfoThread = new SendInfoThread("Eva",null, listOrders);
            sendInfoThread.start();
            
            mainController.setListOrderStore(listOrders);


//            ArrayList<ProcessState> listState = new ArrayList<>();
//
//            for (BaseStoreOrderInfo baseStoreOrderInfo : listOrders) {
//                ProcessState processState = ProcessState.createInstance(baseStoreOrderInfo.getStoreSign(), baseStoreOrderInfo.getAcc_no());
//                processState.setStatus("Test");
//                listState.add(processState);
//                processPannel.addData(processState);
//            }

//            processPannel.addAll(listState);
        }

        mainController.doAction();

    }//GEN-LAST:event_btnStartCrawlActionPerformed

    CrawlProcessListener crawlProcessListener = new CrawlProcessListener() {

        @Override
        public void onPushState(String storeSign, String state) {
            if (processPannel != null) {
                processPannel.updateStatus(storeSign, state);
            }
        }

        @Override
        public void onStop(String storeSign) {
            mainController.pause();
//            mainController.stopCrawl();
        }

        @Override
        public void onStartProcess(String storeSign, String accNo) {
            ProcessState processState = ProcessState.createInstance(storeSign, accNo);
            processPannel.addData(processState);
        }

        @Override
        public void onStopToLogin(String currentUrl, String storeSign) {
            mainController.pause();
            processPannel.updateStatus(storeSign, "Need to login...");
//            CookieUtil.deleteCookies();
            
//            LoginThread loginThread = new LoginThread(true, currentUrl);
//            loginThread.start();
            AliexCrawlSvs.getInstance().goToLogin(currentUrl);
            
            DialogUtil.showInfoMessage(null, "Vui lòng thực hiện đăng nhập lại sau đó ấn Resume!");
        }

        @Override
        public void onFinishPage(String storeSign) {
            SnakeBaseStoreOrderInfo snakeBaseStoreOrderInfo = (SnakeBaseStoreOrderInfo) mainController.nextStore();
            if (snakeBaseStoreOrderInfo != null) {
                mainController.startCrawl(snakeBaseStoreOrderInfo);
            } else {
                mainController.finish();
                actionListener.onFinish(MainController.STATE.STOP);
            }
        }

        @Override
        public void onPushErrorRequest(String storeSign, ResponseObj responseObj) {
            DialogUtil.showErrorMessage(topFrame, "", responseObj.getMessage());
        }

    };

    ActionListener actionListener = new ActionListener() {
        @Override
        public void onFinish(MainController.STATE state) {
            switch (state) {
                case STOP:
                    btnStartCrawl.setText("Start");
                    btnStop.setEnabled(false);
                    break;
                case RUNNING:
                    btnStartCrawl.setText("Pause");
                    btnStop.setEnabled(true);
                    break;
                case PAUSING:
                    btnStartCrawl.setText("Resume");
                    btnStop.setEnabled(true);
                    break;
            }
        }

        @Override
        public void onNotAuthen() {
        }

        @Override
        public void onLicenseInvalid() {
        }
    };

//    public void creatStoreState(BaseStoreOrderInfo baseStoreOrderInfo) {
//        JPanel rowWords = new JPanel();
//
//        rowWords.add(DialogUtil.createLabel(baseStoreOrderInfo.acc_no, 80, null));
//        rowWords.add(new JSeparator(), BorderLayout.CENTER);
//        
//        rowWords.add(DialogUtil.createLabel(baseStoreOrderInfo.acc_no, 80, null));
//        rowWords.add(new JSeparator(), BorderLayout.CENTER);
//        
//        controls.add(rowWords);
//    }
    public static JScrollPane displayData(ArrayList<BaseStoreOrderInfo> listTradeMarkItems, int width, int height) {
//        ArrayList<TradeMarkCheckItem> listTradeMarkItems = new ArrayList<>();

        JPanel controls = new JPanel();
//        SpringLayout layout = new SpringLayout();
//        controls.setLayout(layout);
        controls.setLayout(new BoxLayout(controls, BoxLayout.Y_AXIS));

        for (int i = 0, size = listTradeMarkItems.size(); i < size; i++) {

            BaseStoreOrderInfo tradeMarkItem = listTradeMarkItems.get(i);

//            ProcessPanel processPanel = new ProcessPanel();
//            controls.add(processPanel);
//            controls.add(rowWords);
//            controls.add(rowWords);
//            JSeparator line = new JSeparator();
//            line.setSize(width, 1);
//            controls.add(line);
//            System.out.println("" + controls.getPreferredSize().getWidth() + " | " + controls.getPreferredSize().getHeight());
        }

        System.out.println("" + controls.getWidth() + " | " + controls.getHeight());

        JScrollPane sp = new JScrollPane(controls);
//        Dimension d = sp.getPreferredSize();
//        sp.setPreferredSize(new Dimension(d.width + 30, d.height < height ? d.height + 30 : height));
//        Dimension d = sp.getPreferredSize();
        sp.setSize(new Dimension(width, height));
//        sp.add(controls);

        sp.getVerticalScrollBar().setUnitIncrement(16);

//        javax.swing.SwingUtilities.invokeLater(new Runnable() {
//            public void run() {
//                sp.getVerticalScrollBar().setValue(0);
//            }
//        });
//        jPanel.removeAll();
//        jPanel.add(sp);
        return sp;
    }

    public void saveStore() {
//        String filePath = txtStoreFilePath.getText();
//
//        if (filePath.isEmpty()) {
//            return;
//        }
//        try {
//            ExcelUtils.updateStoreStatus(filePath, storePageInfo, true, totalProduct);
//        } catch (IOException | InvalidFormatException ex) {
//        }
//
//        for (BaseStoreInfo spi : listStorePage) {
//            if (spi.getOrginalStoreLink().equals(storePageInfo.getOrginalStoreLink())) {
//                spi.setState("Done");
//                break;
//            }
//        }
    }

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        mainController.stopCrawl();

        btnStartCrawl.setText("Start");
        btnStop.setEnabled(false);
    }//GEN-LAST:event_btnStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartCrawl;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel storePanel;
    private javax.swing.JTextField txtStoreFilePath;
    // End of variables declaration//GEN-END:variables
}
